<objdefs appVersion="1.0.12">
   <obj.normal id="sysexbuffer" uuid="e485299b-eb91-40ec-bb57-1112cc32fd5b">
      <sDescription>This is not a ready to use object but rather a template for you to send long sysex data in small chunks over time to avoid overflowing the USB-Midi output buffer (AFAIK limited to 192 bytes).

You will have to define the sysex messages you want to send and which port to send to in the code.</sDescription>
      <author>Ivo Grigull</author>
      <license>GPL</license>
      <helpPatch>sysexbuf.axh</helpPatch>
      <inlets>
         <bool32 name="send"/>
      </inlets>
      <outlets/>
      <displays/>
      <params/>
      <attribs>
         <spinner name="sysexrate" description="" MinValue="1" MaxValue="3000" DefaultValue="60"/>
         <spinner name="chunksize" description="Max number of bytes to send at once" MinValue="8" MaxValue="192" DefaultValue="32"/>
         <combo name="size">
            <MenuEntries>
               <string>256</string>
               <string>512</string>
               <string>1024</string>
               <string>2048</string>
               <string>4096</string>
               <string>8192</string>
               <string>16384</string>
               <string>32768</string>
               <string>65536</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
            </CEntries>
         </combo>
      </attribs>
      <includes>
         <include>./sysexbuf.h</include>
         <include>./sysexbuf.cpp</include>
      </includes>
      <code.declaration><![CDATA[ivofx_sysexbuf::ByteRingBuffer ringBuffer;
uint32_t kRateCounter;

bool initialized;
static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int8_t *array;

int strig;]]></code.declaration>
      <code.init><![CDATA[strig = 0;
initialized = false;

static int8_t _array[LENGTH]  __attribute__ ((section (".sdram")));
array = &_array[0];

kRateCounter = 0;
//MAX_BYTES = 32; // About 50% (?), to leave room for other midi messages
//SYSEX_RATE = 50; // 3000/50=60 times per second]]></code.init>
      <code.krate><![CDATA[if (!initialized) {
	ringBuffer.setMemoryAddress (array, LENGTH);	
	initialized = true;
}

// Execute 60 times per second (3000/50)
if ((kRateCounter % (3000 / attr_sysexrate) == 0) && (!ringBuffer.empty())) {
	int c = 0 ;
	static uint8_t sysex[128];
	while ((c < attr_chunksize) && !ringBuffer.empty()){
		sysex[c] = ringBuffer.read();
		//LogTextMessage("Read: %i\n", sysex[c]);
		c++;
	}
	if (c) {
		//LogTextMessage("Sending! %i bytes\n", c);
		MidiSendSysEx(MIDI_DEVICE_USB_HOST, 0, sysex ,c);
	}

}
kRateCounter++;

char sysexArray[59] = {
	0xF0,0x00,0x20,0x29,0x03,0x03,0x12,0x00,0x04,0x00,
	0x02,0x02,0x04,0x01,0x09,0x01,0x04,0x42,0x75,0x74,
	0x74,0x6F,0x6E,0x20,0x32,0x00,0x01,0x09,0x03,0x04,
	0x20,0x20,0x20,0x31,0x00,0x01,0x12,0x01,0x04,0x42,
	0x75,0x74,0x74,0x6F,0x6E,0x20,0x33,0x00,0x01,0x12,
	0x03,0x04,0x20,0x20,0x20,0x4F,0x4E,0x00,0xF7};

char enableAbletonAutomap[13] = {0xF0, 0x00, 0x20, 0x29, 0x03, 0x03,
	0x00, 0x00,
	0x04, 0x00,
	0x01, 0x01, 0xF7};

char test[24] = {0xF0,0x00,0x20,0x29,0x03,0x03,0x12,0x00,0x04,0x00,
				0x02,
				0x02, 0x01, // clear display
				0x01, 0x09, 0x01,
				0x04,0x20,0x20,0x20,0x20,0x20,0x00,0xF7
};


if (inlet_send && !strig){
	//LogTextMessage("Sending sysex");
	char randnum = ___SMMUL ((int32_t)(GenerateRandomNumber()>>1), 9 <<1);
	sysexArray[24] = 48 + randnum;	
	ringBuffer.write((char*) sysexArray, 59);
	strig=1;	
}
else if (!inlet_send){strig=0;}]]></code.krate>
      <code.midihandler><![CDATA[if (dev == MIDI_DEVICE_USB_HOST) {
	if ((status == MIDI_CONTROL_CHANGE + attr_midichannel) && (data2)) {

		uint8_t test[24] = {0xF0,0x00,0x20,0x29,0x03,0x03,0x12,0x00,0x04,0x00,
						0x02,
						0x02, 0x01, // clear display
						0x01, 0x09, 0x01,
						0x04,0x20,0x20,0x20,0x20,0x20,0x00,0xF7};

		char bla[20];
		sprintf(bla, "%i", data2);
		test[17] = bla[0];
		test[18] = bla[1];
		//test[19] = bla[2];
		LogTextMessage(bla);
		MidiSendSysEx(MIDI_DEVICE_USB_HOST, 0, test ,24);

	}
}]]></code.midihandler>
   </obj.normal>
</objdefs>